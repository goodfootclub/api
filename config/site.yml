---

# Simple ansible playbook for deploying our django app on Ubuntu

- name: Install the project for development in a vagrant environment
  hosts: all

  #   _  _ ____ ____ ____
  #   |  | |__| |__/ [__
  #    \/  |  | |  \ ___]
  #
  vars:
    admin_email: ignat@goodfoot.club
    db_name: '{{ project_name }}'
    db_password: '{{ project_name }}'
    db_user: '{{ project_name }}'
    env: vagrant
    host: '{{ inventory_hostname }}'
    project_name: gfc
    remote_user: vagrant
    srv: /home/vagrant
    use_ssl: false

  become: yes
  become_user: root
  remote_user: '{{ remote_user }}'

  #   ___ ____ ____ _  _ ____
  #    |  |__| [__  |_/  [__
  #    |  |  | ___] | \_ ___]
  #
  tasks:

  #   ____ ____ ____ _  _ _ ____ ____ _  _ ____ _  _ ___ ____
  #   |__/ |___ |  | |  | | |__/ |___ |\/| |___ |\ |  |  [__
  #   |  \ |___ |_\| |__| | |  \ |___ |  | |___ | \|  |  ___]
  #
  - name: Run apt-get update
    apt: update_cache=yes

  - name: Ensure that required dependencies available with apt are installed
    apt: name={{ item }} state=present
    with_items:
      # PostgreSQL
      - postgresql
      - postgresql-contrib
      - libpq-dev
      # Nginx
      - nginx

      # Python
      - python-dev
      - python-pip
      - python-psycopg2
      - python-virtualenv
      - python3-dev

      # For Pillow (as in http://pillow.readthedocs.io/en/latest/installation.html#linux-installation)
      - libtiff5-dev
      - libjpeg8-dev
      - zlib1g-dev
      - libfreetype6-dev
      - liblcms2-dev
      - libwebp-dev
      - tcl8.6-dev
      - tk8.6-dev
      - python-tk

      # GIS
      - libproj-dev
      - gdal-bin
      - postgis
      - postgresql-9.3-postgis-2.1

  - name: Ensure that Supervisor is installed
    pip:
      name: supervisor
      state: 'latest'

  - name: Ensure that Tailon (web viewer for logs) is installed
    pip:
      name: tailon
      state: 'latest'
    when: env != 'prod'


  - name: Ensure that project python requirements are installed
    pip:
      requirements: '{{ srv }}/api/requirements.txt'
      virtualenv: '{{ srv }}/.env'
      virtualenv_python: python3.4

  - name: Ensure that Gunicorn is installed
    pip:
      name: gunicorn
      state: 'latest'
      virtualenv: '{{ srv }}/.env'

  # Two tasks above are broken. As of Nov 1st pip ignores virtualenv arg
  # See https://github.com/ansible/ansible-modules-core/issues/5347
  # Temporary requirements are installed with the script blow.
  - name: (Temporary fix) Install project requirements and Gunicorn
    shell:
      cmd: |
        {{ srv }}/.env/bin/pip install -r {{ srv }}/api/requirements.txt
        {{ srv }}/.env/bin/pip install gunicorn

  #   ____ _ _    ____ ____ _   _ ____ ___ ____ _  _
  #   |___ | |    |___ [__   \_/  [__   |  |___ |\/|
  #   |    | |___ |___ ___]   |   ___]  |  |___ |  |
  #
  - name: Ensure that all the needed folders do exist
    file: path={{ item }} state=directory
    with_items:
      - '{{ srv }}/logs'
      - '{{ srv }}/static'
      - '{{ srv }}/media'
      - '{{ srv }}/web/dist'

  - name: Ensure that supervisor config folder exists
    file: path=/etc/supervisor state=directory

  #   ___  ___
  #   |  \ |__]
  #   |__/ |__]
  #
  - name: Ensure that PostgreSQL service is running
    service: name=postgresql state=started enabled=yes

  - name: Ensure that database is present
    become: yes
    become_user: postgres
    vars:
      ansible_ssh_pipelining: true
    postgresql_db:
      name: '{{ db_name }}'
      encoding: 'UTF-8'
      lc_collate: 'en_US.UTF-8'
      lc_ctype: 'en_US.UTF-8'
      template: 'template0'
      state: present

  - name: Ensure that database user exists
    become: yes
    become_user: postgres
    vars:
      ansible_ssh_pipelining: true
    postgresql_user:
      db: '{{ db_name }}'
      name: '{{ db_user }}'
      password: '{{ db_password }}'
      priv: ALL
      role_attr_flags: SUPERUSER
      state: present

  #   _  _ ____ _ _  _ _  _
  #   |\ | | __ | |\ |  \/
  #   | \| |__] | | \| _/\_
  #
  - name: Ensure that Nginx configuration file is up to date
    template:
      src: vagrant.nginx
      dest: /etc/nginx/sites-available/default
      backup: yes
    notify: restart nginx

  # SSL cert
  - name: Download certbot
    get_url:
      url: https://dl.eff.org/certbot-auto
      dest: /opt/certbot-auto
      mode: 0755
    when: use_ssl

  - name: Ensure that Nginx is stopped
    service: name=nginx state=stopped
    when: use_ssl

  - name: Install certbot and generate cert
    command: >-
      /opt/certbot-auto certonly --noninteractive --agree-tos --standalone
      --email {{ admin_email }} -d {{ host }}
    args:
      creates: "/etc/letsencrypt/live/{{ host }}"
    when: use_ssl

  - name: Ensure a cron job to auto-renew the cert exists
    cron:
      name: daily auto renew cert
      special_time: daily
      job: >-
        /opt/certbot-auto renew --standalone --no-self-upgrade --pre-hook
        \"service nginx stop\" --post-hook \"service nginx start\" --quiet
      state: present
    when: use_ssl

  - name: Ensure that Nginx service is started
    service: name=nginx state=started enabled=yes

  #   ___  _   _ ___ _  _ ____ _  _    ____ ___ _  _ ____ ____
  #   |__]  \_/   |  |__| |  | |\ |    [__   |  |  | |___ |___
  #   |      |    |  |  | |__| | \|    ___]  |  |__| |    |
  #
  - name: Ensure that manage.py is executable
    file: path={{ srv }}/api/manage.py mode="u=rwx"

  - name: Migrate django models
    django_manage: >
      command=migrate
      app_path={{ srv }}/api
      virtualenv={{ srv }}/.env

  - name: Collect static files
    django_manage: >
      command=collectstatic
      app_path={{ srv }}/api
      virtualenv={{ srv }}/.env

  - name: Generate random data for testing and development
    django_manage: >
      command={{ item }}
      app_path={{ srv }}/api
      virtualenv={{ srv }}/.env
    with_items:
      - randomusers
      - randomteams
      - randomplayers
      - randomlocations
      - randomgames
    when: env != 'prod'

  # Supervisor
  - name: Ensure that Supervisor configuration file is up to date
    template:
      src: supervisord.conf.ini
      dest: /etc/supervisor/supervisord.conf
      backup: yes
    notify: update supervisor

  - name: Change owner to the ssh user
    file:
      dest: '{{ srv }}'
      owner: '{{ remote_user }}'
      recurse: yes

  # TODO: ensure that Supervisor starts after a reboot
  - name: Ensure that Supervisor service is started
    become: yes
    become_user: '{{ remote_user }}'
    shell: supervisord chdir={{ srv }} creates=supervisor.sock

  - name: Reload supervisor processes
    become: yes
    become_user: '{{ remote_user }}'
    shell: supervisorctl restart all

  #   _  _ ____ _  _ ___  _    ____ ____ ____
  #   |__| |__| |\ | |  \ |    |___ |__/ [__
  #   |  | |  | | \| |__/ |___ |___ |  \ ___]
  #
  handlers:
  - name: restart nginx
    service: name=nginx state=restarted

  - name: update supervisor
    command: supervisorctl update
