; Supervisor config file.
;
; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;

[unix_http_server]
file = {{ srv }}/supervisor.sock

; Enable Web Interface
[inet_http_server]
port = 0.0.0.0:8001

[supervisord]
logfile = {{ srv }}/logs/supervisord.log
user = {{ remote_user }}

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory =
    supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl = unix://{{ srv }}/supervisor.sock

; Django app
[program:gunicorn]
environment =
	PATH="{{ pyenv }}/bin:%(ENV_PATH)s"{% if env != 'vagrant' %},
	DJANGO_SETTINGS_MODULE="%(ENV_DJANGO_SETTINGS_MODULE)s",
	DJANGO_SECRET="%(ENV_DJANGO_SECRET)s",
	FB_KEY="%(ENV_FB_KEY)s",
	FB_SECRET="%(ENV_FB_SECRET)s",
	DJANGO_EMAIL_USER="%(ENV_DJANGO_EMAIL_USER)s",
	DJANGO_EMAIL_PASS="%(ENV_DJANGO_EMAIL_PASS)s"
{% endif %}

directory = {{ srv }}/api
command = {{ pyenv }}/bin/gunicorn -w 4 gfc.wsgi {%
	if env != 'prod'
%} --reload
{% endif %}

stdout_logfile = {{ srv }}/logs/gunicorn.log
stderr_logfile = {{ srv }}/logs/gunicorn-err.log
stopasgroup = true

; Redis server
[program:redis]
command = redis-server

; Celery
[program:celery]
directory = {{ srv }}/api
command = {{ pyenv }}/bin/celery -A gfc worker -l info
stdout_logfile = {{ srv }}/logs/celery.log
stderr_logfile = {{ srv }}/logs/celery-err.log

{% if env == 'vagrant' %}

; Web interface for viewing logs
[program:tailon]
directory = {{ srv }}
command = /usr/local/bin/tailon -f logs/* -b 0.0.0.0:8002

; Debugging mail server
[program:mailserver]
command = python -u -m smtpd -n -c DebuggingServer localhost:1025
stdout_logfile = {{ srv }}/logs/emails.log
stderr_logfile = {{ srv }}/logs/emails-err.log

{% endif %}
